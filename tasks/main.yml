---

# Install Dx-toolkit
- name: Get DX toolkit
  pip:
    requirements: /opt/dx-streaming-upload/requirements.txt

# http://stackoverflow.com/questions/22256884/not-possible-to-source-bashrc-with-ansible
- name: check dx version
  shell: dx --version
  args:
    executable: /bin/bash
  register: dx_version

- name: Print dx version
  debug:
    msg: "Dx-toolkit Version {{ dx_version.stdout }}"

# Install Upload Agent
- name: Create folder to house upload agent
  file: path=/opt/dnanexus-upload-agent state=directory mode=0755

- name: Download and unzip UA tarball
  unarchive:
    src: "https://dnanexus-sdk.s3.amazonaws.com/dnanexus-upload-agent-{{ ua_version }}-linux.tar.gz"
    dest: /opt/dnanexus-upload-agent
    copy: no

- name: Move ua executable to un-versioned folder location for ease of reference
  shell: mv /opt/dnanexus-upload-agent/*/* /opt/dnanexus-upload-agent/

- name: check ua folder content
  shell: ls /opt/dnanexus-upload-agent/
  register: ua_folder_content

- name: print ua folder content
  debug:
    msg: "Upload agent folder contains: {{ ua_folder_content.stdout }}"

- name: Check installed UA version
  command: ua --version
  environment:
    PATH: "/opt/dnanexus-upload-agent:{{ ansible_env.PATH }}"
  register: ua_version

- name: Print installed UA version
  debug:
    msg: "Upload agent Version {{ ua_version.stdout }}"

# Logging into DNAnexus account
- name: Log in to DNAnexus account if dx_user_token is provided
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
  shell: dx login --token {{ item.dx_user_token if 'dx_user_token' in item else dx_token }} --noprojects
  become: yes
  become_user: "{{ item.username }}"
  args:
    executable: /bin/bash
  with_items: "{{ monitored_users }}"
  when: (dx_token is defined) or (item.dx_user_token is defined)

# Copy the necessary scripts for RUN directory monitoring
- name: Create the script directory for housing scripts
  file: path=/opt/dnanexus/scripts state=directory mode=0755

- name: Create the config directory for housing config files
  file: path=/opt/dnanexus/config state=directory mode=0755

- name: Copy necessary scripts
  copy: src=../files/ dest=/opt/dnanexus/scripts

# Copy necessary config for storing local TAR location
- name: Create the script directory for housing scripts
  file: path=~/dnanexus/config state=directory mode=0755
  with_items: "{{ monitored_users }}"
  become: yes
  become_user: "{{ item.username }}"

- name: Copy necessary config to user's home directory
  copy: src=../templates/monitor_run_config.template dest=~/dnanexus/config/monitor_runs.config
  with_items: "{{ monitored_users }}"
  become: yes
  become_user: "{{ item.username }}"

# Edit config file to customize to user-provided parameters
- name: Change config file's novaseq flag
  lineinfile: "dest=~/dnanexus/config/monitor_runs.config regexp='^novaseq:.*' line='novaseq: {{ item.novaseq }}'"
  with_items: "{{ monitored_users }}"
  become: yes
  become_user: "{{ item.username }}"
  when: item.novaseq is defined

- name: Change config file's hourly restart flag
  lineinfile: "dest=~/dnanexus/config/monitor_runs.config regexp='^hourly_restart:.*' line='hourly_restart: {{ hourly_restart }}'"
  when: hourly_restart is defined

- name: Change config file's local TAR directory
  lineinfile: "dest=~/dnanexus/config/monitor_runs.config regexp='^tmp_dir:.*' line='tmp_dir: \"{{ item.local_tar_directory }}\"'"
  with_items: "{{ monitored_users }}"
  become: yes
  become_user: "{{ item.username }}"
  when: item.local_tar_directory is defined

- name: Change config file's local LOG directory
  lineinfile: "dest=~/dnanexus/config/monitor_runs.config regexp='^log_dir:.*' line='log_dir: \"{{ item.local_log_directory }}\"'"
  with_items: "{{ monitored_users }}"
  become: yes
  become_user: "{{ item.username }}"
  when: item.local_log_directory is defined

- name: Change config file's local EXCLUDE pattern
  lineinfile: "dest=~/dnanexus/config/monitor_runs.config regexp='^exclude:.*' line='exclude: \"{{ item.exclude_patterns }}\"'"
  with_items: "{{ monitored_users }}"
  become: yes
  become_user: "{{ item.username }}"
  when: item.exclude_patterns is defined

- name: Change anticipated run duration
  lineinfile: "dest=~/dnanexus/config/monitor_runs.config regexp='^run_length:.*' line='run_length: \"{{ item.run_length }}\"'"
  with_items: "{{ monitored_users }}"
  become: yes
  become_user: "{{ item.username }}"
  when: item.run_length is defined

- name: Change multiplier of run_times to wait
  lineinfile: "dest=~/dnanexus/config/monitor_runs.config regexp='^n_seq_intervals:.*' line='n_seq_intervals: \"{{ item.n_seq_intervals }}\"'"
  with_items: "{{ monitored_users }}"
  become: yes
  become_user: "{{ item.username }}"
  when: item.n_seq_intervals is defined

- name: Change number of retries for incremental_upload
  lineinfile: "dest=~/dnanexus/config/monitor_runs.config regexp='^n_retries:.*' line='n_retries: \"{{ item.n_retries }}\"'"
  with_items: "{{ monitored_users }}"
  become: yes
  become_user: "{{ item.username }}"
  when: item.n_retries is defined

- name: Change number of upload threads for UA
  lineinfile: "dest=~/dnanexus/config/monitor_runs.config regexp='^n_upload_threads:.*' line='n_upload_threads: \"{{ item.n_upload_threads }}\"'"
  with_items: "{{ monitored_users }}"
  become: yes
  become_user: "{{ item.username }}"
  when: item.n_upload_threads is defined

- name: Change verbose for UA
  lineinfile: "dest=~/dnanexus/config/monitor_runs.config regexp='^verbose:.*' line='verbose: {{ item.verbose }}'"
  with_items: "{{ monitored_users }}"
  become: yes
  become_user: "{{ item.username }}"
  when: item.verbose is defined

- name: Change progress for UA
  lineinfile: "dest=~/dnanexus/config/monitor_runs.config regexp='^ua_progress:.*' line='ua_progress: {{ item.ua_progress }}'"
  with_items: "{{ monitored_users }}"
  become: yes
  become_user: "{{ item.username }}"
  when: item.ua_progress is defined

- name: Change specification for downstream input
  lineinfile: # escaping properly is important for this as downstream_input is/can be a JSON obj
    dest: ~/dnanexus/config/monitor_runs.config
    regexp: '^downstream_input:.*'
    line: "downstream_input: '{{ item.downstream_input }}'"
  with_items: "{{ monitored_users }}"
  become: yes
  become_user: "{{ item.username }}"
  when: item.downstream_input is defined

- name: Change specification for minimum upload size
  lineinfile: "dest=~/dnanexus/config/monitor_runs.config regexp='^min_size:.*' line='min_size: \"{{ item.min_size }}\"'"
  with_items: "{{ monitored_users }}"
  become: yes
  become_user: "{{ item.username }}"
  when: item.min_size is defined

- name: Change specification for maximum upload size
  lineinfile: "dest=~/dnanexus/config/monitor_runs.config regexp='^max_size:.*' line='max_size: \"{{ item.max_size }}\"'"
  with_items: "{{ monitored_users }}"
  become: yes
  become_user: "{{ item.username }}"
  when: item.max_size is defined

- name: Change specification for minimum sync interval
  lineinfile: "dest=~/dnanexus/config/monitor_runs.config regexp='^min_interval:.*' line='min_interval: \"{{ item.min_interval }}\"'"
  with_items: "{{ monitored_users }}"
  become: yes
  become_user: "{{ item.username }}"
  when: item.min_interval is defined

- name: Change specification for number of concurrent uploads
  lineinfile: "dest=~/dnanexus/config/monitor_runs.config regexp='^n_streaming_threads:.*' line='n_streaming_threads: \"{{ item.n_streaming_threads }}\"'"
  with_items: "{{ monitored_users }}"
  become: yes
  become_user: "{{ item.username }}"
  when: item.n_streaming_threads is defined

- name: Change specification for delaying sample sheet upload
  lineinfile: "dest=~/dnanexus/config/monitor_runs.config regexp='^delay_sample_sheet_upload:.*' line='delay_sample_sheet_upload: {{ item.delay_sample_sheet_upload }}'"
  with_items: "{{ monitored_users }}"
  become: yes
  become_user: "{{ item.username }}"
  when: item.delay_sample_sheet_upload is defined

- name: Change specification for Minimum age (in seconds) of files to be tarred and uploaded.
  lineinfile: "dest=~/dnanexus/config/monitor_runs.config regexp='^min_age:.*' line='min_age: {{ item.min_age }}'"
  with_items: "{{ monitored_users }}"
  become: yes
  become_user: "{{ item.username }}"
  when: item.min_age is defined


# Create lock file
- name: Create lock file for CRON to wait on using flock
  file: path=/var/lock/dnanexus_uploader.lock state=touch

# Make sure required parameters are defined
- name: fail when project is not defined
  fail: msg="Project to upload to was not defined"
  when: upload_project is not defined

- name: fail when local folder to monitor (for RUN dirs) is not defined
  fail: msg="Local dir to monitor (for RUN dirs) is not defined"
  with_items: "{{ monitored_users }}"
  when: item.monitored_directories is not defined

- name: fail when both applet and workflow is specified (mutually exclusive)
  fail: msg="Both applet and workflow are specified (mutually exclusive)"
  with_items: "{{ monitored_users }}"
  when: (item.workflow is defined) and (item.applet is defined)

# Set up CRON job for monitoring
- name: set up CRON job to run every minute in debug mode with downstream applet
  cron: >
    name="DNAnexus monitor runs (debug) {{ item.1 }}"
    user="{{ item.0.username }}"
    job="flock -w 5 /var/lock/dnanexus_uploader_{{ item.1 | regex_replace('\\/$', '') | basename  }}.lock bash -ex -c 'export SYNC_DURATION_THRESHOLD=60; PATH=/opt/dnanexus-upload-agent:$PATH; python3 /opt/dnanexus/scripts/monitor_runs.py -c ~/dnanexus/config/monitor_runs.config --log-folder {{ cron_log_folder | default(\'~\') }} --log-name monitor_{{ item.1 | regex_replace('\\/$', '') | basename }}.log --log-dsu-name dx-stream_cron_{{ item.1 | regex_replace('\\/$', '') | basename }}.log -p {{ upload_project }} -d {{ item.1 }} {{ \'-A\' if \'applet\' in item.0 else \'\' }} {{ item.0.applet if \'applet\' in item.0 else \'\'}} {{ \'-w\' if \'workflow\' in item.0 else \'\' }} {{ item.0.workflow if \'workflow\' in item.0 else \'\'}} {{ \'-s\' if \'script\' in item.0 else \'\' }} {{ item.0.script if \'script\' in item.0 else \'\'}} -v {{ \'>>\' if append_log | default(false) else \'>\' }} ~/monitor_{{ item.1 | regex_replace('\\/$', '') | basename }}.log 2>&1' {{ \'>>\' if append_log | default(false) else \'>\'}} ~/dx-stream_cron_{{ item.1 | regex_replace('\\/$', '') | basename }}.log 2>&1"
  with_subelements:
        - "{{ monitored_users }}"
        - monitored_directories
  become: yes
  become_user: "{{ item.0.username }}"
  when: mode == "debug"

- name: set up CRON job to run every hour in deploy mode with downstream applet
  cron: >
    name="DNAnexus monitor runs (deploy) {{ item.1 }}"
    special_time=hourly
    user="{{ item.0.username }}"
    job="flock -w 5 /var/lock/dnanexus_uploader_{{ item.1 | regex_replace('\\/$', '') | basename  }}.lock bash -ex -c 'PATH=/opt/dnanexus-upload-agent:$PATH; python3 /opt/dnanexus/scripts/monitor_runs.py -c ~/dnanexus/config/monitor_runs.config --log-folder {{ cron_log_folder | default(\'~\') }} --log-name monitor_{{ item.1 | regex_replace('\\/$', '') | basename }}.log --log-dsu-name dx-stream_cron_{{ item.1 | regex_replace('\\/$', '') | basename }}.log -p {{ upload_project }} -d {{ item.1 }} {{ \'-A\' if \'applet\' in item.0 else \'\' }} {{ item.0.applet if \'applet\' in item.0 else \'\'}} {{ \'-w\' if \'workflow\' in item.0 else \'\' }} {{ item.0.workflow if \'workflow\' in item.0 else \'\'}} {{ \'-s\' if \'script\' in item.0 else \'\' }} {{ item.0.script if \'script\' in item.0 else \'\'}} -v {{ \'>>\' if append_log | default(false) else \'>\' }} ~/monitor_{{ item.1 | regex_replace('\\/$', '') | basename }}.log 2>&1' {{ \'>>\' if append_log | default(false) else \'>\'}} ~/dx-stream_cron_{{ item.1 | regex_replace('\\/$', '') | basename }}.log 2>&1"
  with_subelements:
        - "{{ monitored_users }}"
        - monitored_directories
  become: yes
  become_user: "{{ item.0.username }}"
  when: mode == "deploy"

# Clean up CRON job in alternate mode
- name: delete deploy mode CRON job if debug mode set
  cron: >
    name="DNAnexus monitor runs (deploy)"
    user="{{ item.username }}"
    state=absent
  with_items: "{{ monitored_users }}"
  become: yes
  become_user: "{{ item.username }}"
  when: mode == "debug"

- name: delete deploy mode CRON job if debug mode set
  cron: >
    name="DNAnexus monitor runs (deploy) {{ item.1 }}"
    user="{{ item.0.username }}"
    state=absent
  with_subelements:
        - "{{ monitored_users }}"
        - monitored_directories
  become: yes
  become_user: "{{ item.0.username }}"
  when: mode == "debug"

- name: delete debug mode CRON job if deploy mode set
  cron: >
    name="DNAnexus monitor runs (debug)"
    user="{{ item.username }}"
    state=absent
  with_items: "{{ monitored_users }}"
  become: yes
  become_user: "{{ item.username }}"
  when: mode == "deploy"

- name: delete debug mode CRON job if deploy mode set
  cron: >
    name="DNAnexus monitor runs (debug) {{ item.1 }}"
    user="{{ item.0.username }}"
    state=absent
  with_subelements:
        - "{{ monitored_users }}"
        - monitored_directories
  become: yes
  become_user: "{{ item.0.username }}"
  when: mode == "deploy"
